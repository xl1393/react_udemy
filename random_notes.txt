vscode: 
    ESLint 
    Prettier 
    Material Icon Theme 
    GitHub

React component: Data, logic, apperance. nesting component. component tree.

component Data: props: props are read only if props are allowed to chang, the
original copy are affected state: can be modified logic apperance

React is one-way data flow, data can only be passed from parent to children by
using props, but NO children to parents.

#set state based on current state: use call back function setStep((s) => s+1)
not setStep(step +1)

"children" props

component size matters

Array.from(arrayLike)
Array.from(arrayLike, mapFn)
Array.from(arrayLike, mapFn, thisArg)

never do       {TabContent({item:content.at(0)})} always use <TabContent />

video 129 130 are important also video 137
state batching
diff rule
key rule

dependece array
effect executed after browser paint
clean up function   
    before effect
    after unmount

"controller, signal, etc"

useRef

let a = 0; always re-render and reset to 0

setInterval // cleaerInterval pair use


/* eslint-disable no-unused-vars */
/* eslint-disable react/prop-types */


CreateContext
useContext
<PostContext.provider>
extract all provider in one file and use 'children'
custom hook

useMemo: {} does not equal to {}, so passing props, even the same, will re-render. so use useMemo  
    but function from useStat is always the same one, does not trigger re-render.
useCallback

optimize context 

lazy() + <Suspense />


Redux: combine reducer, root reducer, createStore
        "slice" part of the store. export reducer and action function.
        slice file contain all logic of one reducer
        store.js will import all reducer and combine them into 1 root reducer.
        
        react-redux: <Provider store={store}> </Provider>, import {Provider} from "react-redux"
        useSelector from "react-redux"
        const customer = useSelector((store) => store.customer.fullName) //one of the reducer from root reducer/root store

        const dispatch = useDispatch() (import from react-redux)

        applyMiddleware(thunk) use react thunk as middle ware.
        "return a async function, redux will know it is async and run it first" in thunk.


        dispatch the following whole thing:
        return async function(dispatch, getState){
            ...
            ...outside api call
            dispatch({some logic})
        }